generator client {
  provider = "prisma-client-js"
  // Force regeneration: 2025-10-21T10:45:00Z
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model articles {
  id               String            @id
  title            String
  content          String
  status           String            @default("generated")
  sourceId         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  aiModel          String?
  aiPrompts        Json?
  authorId         Int?
  authorName       String?
  categories       Json?
  commentStatus    String?
  customFields     Json?
  excerpt          String?
  featuredMediaId  Int?
  featuredMediaUrl String?
  generationConfig Json?
  isSticky         Boolean?
  lastSyncAt       DateTime?
  metaFields       Json?
  modifiedAt       DateTime?
  pingStatus       String?
  postFormat       String?
  postPassword     String?
  postTemplate     String?
  publishedAt      DateTime?
  scheduledAt      DateTime?
  shareCount       Int?
  slug             String?
  sourceTitle      String?
  sourceType       String?
  sourceUrl        String?
  tags             Json?
  viewCount        Int?
  wordpressId      Int?
  wordpressSiteId  String?
  wordpressStatus  String?
  wordpressUrl     String?
  yoastSeo         Json?
  contentProtected Boolean?
  contentRaw       String?
  contentRendered  String?
  excerptProtected Boolean?
  excerptRaw       String?
  excerptRendered  String?
  modifiedAtGmt    DateTime?
  publishedAtGmt   DateTime?
  titleRaw         String?
  titleRendered    String?
  wordpressData    Json?
  wordpressGuid    Json?
  wordpressType    String?
  articleData      Json?
  wordpress_media  wordpress_media?  @relation(fields: [featuredMediaId, wordpressSiteId], references: [wordpressId, wordpressSiteId])
  sources          sources?          @relation(fields: [sourceId], references: [id])
  wordpress_sites  wordpress_sites?  @relation(fields: [wordpressSiteId], references: [id])
  featured_images  featured_images[]

  @@index([createdAt])
  @@index([publishedAt])
  @@index([sourceType])
  @@index([status])
  @@index([wordpressId, wordpressSiteId])
}

model featured_images {
  id               String   @id
  userId           String?
  articleId        String
  aiPrompt         String
  filename         String
  altText          String
  url              String?
  status           String
  searchQuery      String?
  errorMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  wordpressMediaId Int?
  wordpressUrl     String?
  articles         articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
  users            users?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([createdAt])
  @@index([status])
  @@index([userId])
  @@index([wordpressMediaId])
}

model feed_items {
  id          String   @id
  sourceId    String
  guid        String?
  title       String
  content     String
  url         String?
  publishedAt DateTime
  fetchedAt   DateTime @default(now())
  processed   Boolean  @default(false)
  articleId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  status      String   @default("pending")
  sources     sources  @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, publishedAt])
  @@index([status])
}

model generation_settings {
  id                      String   @id
  userId                  String   @unique
  titlePrompt             String
  contentPrompt           String
  defaultModel            String   @default("sonar-pro")
  defaultTemperature      Float    @default(0.7)
  defaultMaxTokens        Int      @default(20000)
  defaultLanguage         String   @default("it")
  defaultTone             String   @default("professionale")
  defaultStyle            String   @default("giornalistico")
  defaultTargetAudience   String   @default("generale")
  createdAt               DateTime @default(now())
  updatedAt               DateTime
  imagePrompt             String   @default("in stile cartoon. Individua un dettaglio rappresentativo dell'idea base dell'articolo. Non usare scritte n√© simboli.")
  imageStyle              String   @default("natural")
  imageModel              String   @default("dall-e-3")
  imageSize               String   @default("1792x1024")
  allowPromptEditing      Boolean  @default(true)
  enablePromptEngineering Boolean  @default(false)
  imageGenerationMode     String   @default("manual")
  promptEngineeringModel  String   @default("gpt-4")
  promptTemplate          String?
}

model health_checks {
  id           String   @id
  timestamp    DateTime @default(now())
  status       String
  responseTime Int
  details      Json
  version      String?
  environment  String?
  alertSent    Boolean  @default(false)
  alertType    String?
  createdAt    DateTime @default(now())

  @@index([alertSent])
  @@index([status])
  @@index([timestamp])
}

model health_reports {
  id                  String    @id
  timestamp           DateTime  @default(now())
  reportType          String
  periodStart         DateTime
  periodEnd           DateTime
  overallStatus       String
  totalChecks         Int
  uptimePercentage    Float
  totalAlerts         Int
  criticalAlerts      Int
  averageResponseTime Int
  reportData          Json
  htmlReport          String
  emailSent           Boolean   @default(false)
  emailSentAt         DateTime?
  emailRecipients     Json?
  createdAt           DateTime  @default(now())

  @@index([overallStatus])
  @@index([periodStart, periodEnd])
  @@index([reportType])
  @@index([timestamp])
}

model image_prompts {
  id               String   @id
  userId           String?
  articleId        String
  articleTitle     String
  articleExcerpt   String
  generatedPrompt  String
  originalTemplate String
  aiModel          String
  status           String
  metadata         String?
  errorMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  users            users?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([createdAt])
  @@index([status])
  @@index([userId])
}

model publications {
  id          String    @id
  userId      String?
  articleId   String
  externalId  String
  externalUrl String
  status      String
  platform    String
  target      Json
  content     Json
  metadata    Json
  publishedAt DateTime?
  retryCount  Int       @default(0)
  lastError   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  users       users?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sources {
  id              String       @id
  userId          String?
  name            String
  type            String
  status          String       @default("active")
  url             String?
  defaultCategory String?
  configuration   Json?
  metadata        Json?
  lastFetchAt     DateTime?
  lastErrorAt     DateTime?
  lastError       String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime
  isActive        Boolean      @default(true)
  lastFetchStatus String?
  articles        articles[]
  feed_items      feed_items[]
  users           users?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, url])
  @@index([userId])
  @@index([userId, type])
}

model system_alerts {
  id                String    @id
  type              String
  service           String
  severity          String
  status            String
  title             String
  message           String
  details           Json?
  triggeredAt       DateTime  @default(now())
  resolvedAt        DateTime?
  acknowledgedAt    DateTime?
  notificationsSent Json?
  occurrenceCount   Int       @default(1)
  lastOccurrence    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime

  @@index([severity])
  @@index([status])
  @@index([triggeredAt])
  @@index([type, service])
}

model user_permissions {
  id         String   @id
  userId     String
  permission String
  resource   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  users      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission, resource])
  @@index([permission])
  @@index([userId])
}

model users {
  id                  String             @id
  name                String?
  email               String             @unique
  emailVerified       DateTime?
  image               String?
  provider            String             @default("credentials")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime
  clerkUserId         String?            @unique
  failedLoginAttempts Int                @default(0)
  isActive            Boolean            @default(true)
  lastLoginAt         DateTime?
  organizationId      String?
  role                UserRole           @default(CONTENT_VIEWER)
  accounts            accounts[]
  featured_images     featured_images[]
  image_prompts       image_prompts[]
  publications        publications[]
  sessions            sessions[]
  sources             sources[]
  user_permissions    user_permissions[]
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model wordpress_media {
  id              String          @id
  wordpressId     Int
  wordpressSiteId String
  status          String
  slug            String?
  author          Int?
  uploadedAt      DateTime?
  uploadedAtGmt   DateTime?
  modifiedAt      DateTime?
  modifiedAtGmt   DateTime?
  title           String?
  altText         String?
  caption         String?
  description     String?
  mediaType       String?
  mimeType        String?
  sourceUrl       String
  link            String?
  fileSize        Int?
  fileName        String?
  width           Int?
  height          Int?
  guid            Json?
  mediaDetails    Json?
  postId          Int?
  customFields    Json?
  metaFields      Json?
  wordpressData   Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  lastSyncAt      DateTime?
  articles        articles[]
  wordpress_sites wordpress_sites @relation(fields: [wordpressSiteId], references: [id])

  @@unique([wordpressId, wordpressSiteId])
  @@index([mediaType])
  @@index([uploadedAt])
}

model wordpress_sites {
  id                   String            @id
  userId               String
  name                 String
  url                  String
  username             String?
  password             String?
  defaultCategory      String?
  defaultStatus        String            @default("draft")
  defaultAuthor        String?
  enableAutoPublish    Boolean           @default(false)
  enableFeaturedImage  Boolean           @default(true)
  enableTags           Boolean           @default(true)
  enableCategories     Boolean           @default(true)
  customFields         Json?
  isActive             Boolean           @default(true)
  lastPublishAt        DateTime?
  lastError            String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime
  enableAutoGeneration Boolean           @default(false)
  articles             articles[]
  wordpress_media      wordpress_media[]
}

enum UserRole {
  SUPER_ADMIN
  ORGANIZATION_ADMIN
  CONTENT_MANAGER
  CONTENT_EDITOR
  CONTENT_VIEWER
  API_USER
}
