generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        String   @id @default(cuid())

  // Campi base dell'articolo (oggetti WordPress)
  title         String
  titleRaw      String?     // title.raw da WordPress
  titleRendered String?     // title.rendered da WordPress
  content       String
  contentRaw    String?     // content.raw da WordPress
  contentRendered String?   // content.rendered da WordPress
  contentProtected Boolean? // content.protected da WordPress
  excerpt       String?
  excerptRaw    String?     // excerpt.raw da WordPress
  excerptRendered String?   // excerpt.rendered da WordPress
  excerptProtected Boolean? // excerpt.protected da WordPress
  status        String      @default("generated")
  slug          String?

  // Nuova struttura JSON articolo
  articleData   Json?       // Struttura JSON completa dell'articolo (metadati, seo, contenuto, immagine, link)

  // Metadati WordPress
  wordpressId       Int?        // ID del post su WordPress
  wordpressSiteId   String?     // Riferimento al sito WordPress
  wordpressUrl      String?     // URL del post pubblicato (link)
  wordpressStatus   String?     // draft, publish, private, future
  wordpressType     String?     // Tipo di post WordPress
  wordpressGuid     Json?       // Globally unique identifier object

  // Tassonomie
  categories        Json?       // Array di ID categorie WordPress
  tags              Json?       // Array di ID tag WordPress

  // Media e allegati
  featuredMediaId   Int?        // ID immagine in evidenza WordPress
  featuredMediaUrl  String?     // URL immagine in evidenza
  featuredMedia     WordPressMedia? @relation("FeaturedMedia", fields: [featuredMediaId, wordpressSiteId], references: [wordpressId, wordpressSiteId])

  // Metadati di pubblicazione (WordPress native)
  publishedAt       DateTime?   // Data di pubblicazione (date)
  publishedAtGmt    DateTime?   // Data di pubblicazione GMT (date_gmt)
  modifiedAt        DateTime?   // Ultima modifica su WordPress (modified)
  modifiedAtGmt     DateTime?   // Ultima modifica GMT (modified_gmt)
  scheduledAt       DateTime?   // Data programmata (per status=future)

  // Configurazione post
  postFormat        String?     // standard, aside, gallery, etc.
  postTemplate      String?     // Template personalizzato
  postPassword      String?     // Password per contenuti protetti

  // Controlli di interazione
  commentStatus     String?     // open, closed
  pingStatus        String?     // open, closed
  isSticky          Boolean?    // Post in evidenza

  // Metadati autore
  authorId          Int?        // ID autore WordPress
  authorName        String?     // Nome autore

  // Custom fields e meta
  customFields      Json?       // Custom fields del post
  yoastSeo          Json?       // Metadati Yoast SEO
  metaFields        Json?       // Altri meta fields
  wordpressData     Json?       // JSON completo della risposta WordPress

  // Statistiche e tracciamento
  viewCount         Int?        // Numero di visualizzazioni
  shareCount        Int?        // Numero di condivisioni

  // Fonte e generazione
  sourceId          String?     // Fonte da cui è stato generato
  sourceType        String?     // manual, rss, telegram, etc.
  sourceUrl         String?     // URL fonte originale
  sourceTitle       String?     // Titolo fonte

  // AI e generazione
  aiModel           String?     // Modello AI usato per generazione
  aiPrompts         Json?       // Prompt utilizzati
  generationConfig  Json?       // Configurazione generazione

  // Metadati sistema
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastSyncAt        DateTime?   // Ultima sincronizzazione con WordPress

  // Relazioni
  source            Source?     @relation(fields: [sourceId], references: [id])
  wordpressSite     WordPressSite? @relation(fields: [wordpressSiteId], references: [id])
  featuredImages    FeaturedImage[] // Relazione con immagini generate

  @@index([wordpressId, wordpressSiteId])
  @@index([publishedAt])
  @@index([status])
  @@index([sourceType])
  @@index([createdAt])
  @@map("articles")
}

model Source {
  id              String     @id @default(cuid())
  name            String
  type            String
  status          String     @default("active")
  url             String?
  defaultCategory String?
  configuration   Json?
  metadata        Json?
  lastFetchAt     DateTime?
  lastFetchStatus String?    // success, error, pending
  lastErrorAt     DateTime?
  lastError       String?
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  articles        Article[]
  feedItems       FeedItem[]

  @@unique([type, url])
  @@map("sources")
}

// Enterprise User Management Model
model User {
  id                String          @id @default(cuid())
  clerkUserId       String?         @unique // Clerk.com user ID for external auth
  name              String?
  firstName         String?
  lastName          String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  provider          String          @default("clerk")

  // Role and Security
  role              String          @default("viewer") // admin, editor, viewer
  isActive          Boolean         @default(true)
  isEmailVerified   Boolean         @default(false)
  isTwoFactorEnabled Boolean        @default(false)

  // Clerk Integration
  clerkPublicMetadata Json?         // Clerk public metadata
  clerkPrivateMetadata Json?        // Clerk private metadata
  clerkUnsafeMetadata Json?         // Clerk unsafe metadata

  // Security Tracking
  lastSignInAt      DateTime?
  lastSignInIp      String?
  lastActiveAt      DateTime?
  failedLoginAttempts Int           @default(0)
  lockedAt          DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?

  // Business Context
  organizationId    String?         // For multi-tenant support
  department        String?
  jobTitle          String?
  phoneNumber       String?
  timezone          String?         @default("UTC")
  language          String?         @default("it")

  // Preferences
  preferences       Json?           // User preferences in JSON
  notificationSettings Json?        // Notification preferences

  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?       // Soft delete

  // Legacy Relations (keep for backward compatibility)
  accounts          Account[]
  sessions          Session[]

  // New Enterprise Relations
  userRoles         UserRole[]      // Many-to-many with roles
  auditLogs         PermissionAuditLog[] @relation("AuditLogUser")
  targetAuditLogs   PermissionAuditLog[] @relation("AuditLogTargetUser")
  generationSettings GenerationSettings?
  wordPressSite     WordPressSite?

  @@index([clerkUserId])
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([organizationId])
  @@index([lastActiveAt])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FeedItem {
  id          String   @id @default(cuid())
  sourceId    String
  guid        String?
  title       String
  content     String
  url         String?
  publishedAt DateTime
  fetchedAt   DateTime @default(now())
  status      String   @default("pending") // "pending" | "draft" | "processed"
  processed   Boolean  @default(false) // TEMPORARY: Keep for migration safety
  articleId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, publishedAt])
  @@index([status])
  @@map("feed_items")
}

model GenerationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  titlePrompt           String
  contentPrompt         String
  imagePrompt           String   @default("in stile cartoon. Individua un dettaglio rappresentativo dell'idea base dell'articolo. Non usare scritte né simboli.")
  imageStyle            String   @default("natural")
  imageModel            String   @default("dall-e-3")
  imageSize             String   @default("1792x1024")

  // Nuovi campi per gestione modalità generazione immagini
  imageGenerationMode   String   @default("manual") // 'manual' | 'ai_assisted' | 'full_auto'
  enablePromptEngineering Boolean @default(false)
  promptTemplate        String?  // Template per ChatGPT
  allowPromptEditing    Boolean  @default(true)   // Per ai_assisted mode
  promptEngineeringModel String  @default("gpt-4") // Modello AI per prompt engineering

  defaultModel          String   @default("sonar-pro")
  defaultTemperature    Float    @default(0.7)
  defaultMaxTokens      Int      @default(20000)
  defaultLanguage       String   @default("it")
  defaultTone           String   @default("professionale")
  defaultStyle          String   @default("giornalistico")
  defaultTargetAudience String   @default("generale")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("generation_settings")
}

model WordPressSite {
  id               String   @id @default(cuid())
  userId           String   @unique
  name             String
  url              String
  username         String
  password         String
  defaultCategory  String?
  defaultStatus    String   @default("draft")
  defaultAuthor    String?
  enableAutoGeneration Boolean @default(false)
  enableAutoPublish Boolean @default(false)
  enableFeaturedImage Boolean @default(true)
  enableTags       Boolean @default(true)
  enableCategories Boolean @default(true)
  customFields     Json?
  isActive         Boolean  @default(true)
  lastPublishAt    DateTime?
  lastError        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relazioni
  articles         Article[]
  media            WordPressMedia[]

  @@map("wordpress_sites")
}

model WordPressMedia {
  id               String   @id @default(cuid())

  // Metadati WordPress Media
  wordpressId      Int      // ID del media su WordPress
  wordpressSiteId  String   // Riferimento al sito WordPress
  status           String   // publish, draft, etc.
  slug             String?  // Identificatore univoco
  author           Int?     // ID autore che ha caricato

  // Date WordPress native
  uploadedAt       DateTime? // data caricamento
  uploadedAtGmt    DateTime? // data caricamento GMT
  modifiedAt       DateTime? // ultima modifica
  modifiedAtGmt    DateTime? // ultima modifica GMT

  // Metadati base del file
  title            String?   // Titolo del media
  altText          String?   // Testo alternativo (importante per SEO)
  caption          String?   // Didascalia
  description      String?   // Descrizione completa

  // Informazioni tecniche del file
  mediaType        String?   // image, file, video, audio
  mimeType         String?   // image/jpeg, image/png, etc.
  sourceUrl        String    // URL originale del file
  link             String?   // URL pagina media WordPress

  // Dettagli tecnici avanzati
  fileSize         Int?      // Dimensione in bytes
  fileName         String?   // Nome file originale
  width            Int?      // Larghezza immagine
  height           Int?      // Altezza immagine

  // Metadati WordPress avanzati
  guid             Json?     // Globally unique identifier
  mediaDetails     Json?     // Dettagli specifici media (sizes, exif, etc.)
  postId           Int?      // ID post associato (se allegato)

  // Metadati aggiuntivi
  customFields     Json?     // Custom fields del media
  metaFields       Json?     // Meta fields WordPress
  wordpressData    Json?     // JSON completo risposta WordPress

  // Metadati sistema
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastSyncAt       DateTime? // Ultima sincronizzazione

  // Relazioni
  wordpressSite    WordPressSite @relation(fields: [wordpressSiteId], references: [id])
  articlesAsFeature Article[] @relation("FeaturedMedia")

  @@unique([wordpressId, wordpressSiteId])
  @@index([mediaType])
  @@index([uploadedAt])
  @@map("wordpress_media")
}

model Publication {
  id            String   @id @default(cuid())
  articleId     String
  externalId    String
  externalUrl   String
  status        String
  platform      String
  target        Json
  content       Json
  metadata      Json
  publishedAt   DateTime?
  retryCount    Int      @default(0)
  lastError     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("publications")
}

model FeaturedImage {
  id           String   @id @default(cuid())
  articleId    String   // Riferimento all'articolo
  aiPrompt     String   // Prompt AI utilizzato per la generazione
  filename     String   // Nome del file dell'immagine
  altText      String   // Testo alternativo per l'immagine
  url          String?  // URL dell'immagine generata (null se generazione fallita)
  status       String   // pending, searching, found, generated, uploaded, failed
  searchQuery  String?  // Query di ricerca utilizzata (opzionale)
  errorMessage String?  // Messaggio di errore in caso di fallimento

  // WordPress upload fields
  wordpressMediaId Int?    // ID dell'immagine nella media library di WordPress
  wordpressUrl     String? // URL dell'immagine su WordPress

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relazione con Article
  article      Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([status])
  @@index([createdAt])
  @@index([wordpressMediaId])
  @@map("featured_images")
}

model ImagePrompt {
  id               String   @id @default(cuid())
  articleId        String   // Riferimento all'articolo
  articleTitle     String   // Titolo dell'articolo per context
  articleExcerpt   String   // Estratto del contenuto per context
  generatedPrompt  String   // Prompt generato dall'AI
  originalTemplate String   // Template originale utilizzato
  aiModel          String   // Modello AI utilizzato (gpt-4, gpt-3.5-turbo)
  status           String   // pending, generated, validated, failed
  metadata         String?  // Metadati aggiuntivi in JSON (tokens, confidence, etc.)
  errorMessage     String?  // Messaggio di errore se fallimento
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([articleId])
  @@index([status])
  @@index([createdAt])
  @@map("image_prompts")
}

model HealthCheck {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  status       String   // healthy, degraded, unhealthy
  responseTime Int      // Response time in milliseconds
  details      Json     // Full health check response
  version      String?  // Application version (git commit)
  environment  String?  // production, development, etc.

  // Alert tracking
  alertSent    Boolean  @default(false)
  alertType    String?  // email, slack, webhook

  createdAt    DateTime @default(now())

  @@index([timestamp])
  @@index([status])
  @@index([alertSent])
  @@map("health_checks")
}

model SystemAlert {
  id           String   @id @default(cuid())
  type         String   // service_down, performance_degraded, error_rate_high, etc.
  service      String   // database, api, rss-sources, etc.
  severity     String   // low, medium, high, critical
  status       String   // active, acknowledged, resolved
  title        String   // Alert title/summary
  message      String   // Detailed alert message
  details      Json?    // Additional context data

  // Timestamps
  triggeredAt  DateTime @default(now())
  resolvedAt   DateTime?
  acknowledgedAt DateTime?

  // Notification tracking
  notificationsSent Json? // Array of sent notifications with timestamps

  // Metrics
  occurrenceCount Int    @default(1)
  lastOccurrence  DateTime @default(now())

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([type, service])
  @@index([severity])
  @@index([status])
  @@index([triggeredAt])
  @@map("system_alerts")
}

model HealthReport {
  id                    String   @id @default(cuid())
  timestamp             DateTime @default(now())
  reportType            String   // summary_12h, summary_daily, incident_report
  periodStart           DateTime // Inizio periodo analizzato
  periodEnd             DateTime // Fine periodo analizzato

  // Metriche principali
  overallStatus         String   // healthy, degraded, unhealthy
  totalChecks           Int      // Numero totale health checks nel periodo
  uptimePercentage      Float    // Percentuale uptime
  totalAlerts           Int      // Totale alert nel periodo
  criticalAlerts        Int      // Alert critici
  averageResponseTime   Int      // Tempo risposta medio (ms)

  // Dati completi del report
  reportData            Json     // Analisi completa in JSON
  htmlReport            String   @db.Text // Report HTML per email

  // Tracking notifiche
  emailSent             Boolean  @default(false)
  emailSentAt           DateTime?
  emailRecipients       Json?    // Lista recipient email

  createdAt             DateTime @default(now())

  @@index([timestamp])
  @@index([reportType])
  @@index([overallStatus])
  @@index([periodStart, periodEnd])
  @@map("health_reports")
}

// =====================================================
// ENTERPRISE PERMISSION SYSTEM - B2B GRADE SECURITY
// =====================================================

// Permission Entity - Atomic permissions (resource:action format)
model Permission {
  id              String          @id @default(cuid())
  name            String          @unique // Format: "resource:action" (e.g., "articles:create")
  resource        String          // Resource type (articles, users, etc.)
  action          String          // Action type (create, read, update, delete, manage)
  description     String          // Human-readable description
  category        String?         // Grouping category for UI organization
  isSystemPermission Boolean      @default(false) // Cannot be deleted/modified

  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  rolePermissions RolePermission[] // Many-to-many with roles
  auditLogs       PermissionAuditLog[]

  @@index([resource, action])
  @@index([category])
  @@index([isSystemPermission])
  @@map("permissions")
}

// Role Definition with Dynamic Permissions
model Role {
  id              String          @id @default(cuid())
  name            String          @unique // "admin", "editor", "viewer", custom roles
  displayName     String          // User-friendly name
  description     String          // Role description for UI
  level           Int             // Hierarchy level (higher = more permissions)
  isSystemRole    Boolean         @default(false) // Built-in roles that cannot be deleted
  isActive        Boolean         @default(true)

  // Customization
  color           String?         // UI color for role badges
  icon            String?         // UI icon identifier

  // Timestamps
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String?         // User ID who created this role

  // Relations
  userRoles       UserRole[]      // Many-to-many with users
  rolePermissions RolePermission[] // Many-to-many with permissions
  auditLogs       PermissionAuditLog[]

  @@index([level])
  @@index([isSystemRole])
  @@index([isActive])
  @@map("roles")
}

// User-Role Assignment (Many-to-Many)
model UserRole {
  id              String          @id @default(cuid())
  userId          String
  roleId          String

  // Assignment Context
  assignedBy      String?         // User ID who assigned this role
  assignedAt      DateTime        @default(now())
  expiresAt       DateTime?       // Optional role expiration
  isActive        Boolean         @default(true)

  // Business Context
  organizationId  String?         // For multi-tenant scenarios
  department      String?         // Department-specific role assignment
  reason          String?         // Business reason for assignment

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, organizationId])
  @@index([userId])
  @@index([roleId])
  @@index([expiresAt])
  @@index([organizationId])
  @@map("user_roles")
}

// Role-Permission Assignment (Many-to-Many)
model RolePermission {
  id              String          @id @default(cuid())
  roleId          String
  permissionId    String

  // Assignment Metadata
  grantedBy       String?         // User ID who granted this permission
  grantedAt       DateTime        @default(now())
  revokedAt       DateTime?       // When permission was revoked
  isActive        Boolean         @default(true)

  // Contextual Permissions
  resourceFilter  Json?           // Optional filters for resource-specific permissions
  conditions      Json?           // Additional permission conditions

  // Relations
  role            Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission      Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([isActive])
  @@map("role_permissions")
}

// Comprehensive Audit Trail for Security Compliance
model PermissionAuditLog {
  id              String          @id @default(cuid())

  // Event Classification
  eventType       String          // PERMISSION_CHECK, ROLE_UPDATED, ACCESS_GRANTED, ACCESS_DENIED, etc.
  action          String          // Specific action performed
  resource        String?         // Resource involved
  resourceId      String?         // Specific resource ID

  // Principal (who performed the action)
  userId          String?         // Acting user
  userEmail       String?         // Email for audit trail
  userRole        String?         // Role at time of action

  // Target (who/what was affected)
  targetUserId    String?         // Target user (for admin actions)
  targetEmail     String?         // Target user email
  roleId          String?         // Role involved
  permissionId    String?         // Permission involved

  // Result and Context
  granted         Boolean         @default(false) // Was access granted?
  reason          String?         // Why access was granted/denied
  riskScore       Int?            // Risk assessment score (1-10)

  // Technical Context
  ipAddress       String?         // Source IP address
  userAgent       String?         // Browser/client information
  sessionId       String?         // Session identifier
  requestId       String?         // Request correlation ID

  // Business Context
  organizationId  String?         // Organization context
  department      String?         // Department context

  // Additional Data
  metadata        Json?           // Additional context data
  errorDetails    Json?           // Error information if applicable

  // Timestamps
  timestamp       DateTime        @default(now())
  createdAt       DateTime        @default(now())

  // Relations
  user            User?           @relation("AuditLogUser", fields: [userId], references: [id])
  targetUser      User?           @relation("AuditLogTargetUser", fields: [targetUserId], references: [id])
  role            Role?           @relation(fields: [roleId], references: [id])
  permission      Permission?     @relation(fields: [permissionId], references: [id])

  @@index([eventType, timestamp])
  @@index([userId, timestamp])
  @@index([targetUserId, timestamp])
  @@index([resource, action])
  @@index([granted])
  @@index([riskScore])
  @@index([ipAddress])
  @@index([organizationId])
  @@index([timestamp])
  @@map("permission_audit_logs")
}

// Security Events and Alerts
model SecurityEvent {
  id              String          @id @default(cuid())

  // Event Classification
  eventType       String          // SUSPICIOUS_LOGIN, PRIVILEGE_ESCALATION, BULK_ACCESS, etc.
  severity        String          // LOW, MEDIUM, HIGH, CRITICAL
  status          String          // ACTIVE, INVESTIGATING, RESOLVED, FALSE_POSITIVE

  // Event Details
  title           String          // Brief event title
  description     String          // Detailed description
  category        String          // Authentication, Authorization, Data_Access, etc.

  // Principal Information
  userId          String?         // User involved
  userEmail       String?         // Email for correlation
  sessionId       String?         // Session identifier

  // Technical Details
  ipAddress       String?         // Source IP
  userAgent       String?         // Client information
  endpoint        String?         // API endpoint accessed
  requestData     Json?           // Request details

  // Risk Assessment
  riskScore       Int             @default(1) // 1-10 risk level
  confidence      Float           @default(0.0) // 0.0-1.0 confidence in detection
  falsePositive   Boolean         @default(false)

  // Investigation
  investigatedBy  String?         // User ID of investigator
  investigatedAt  DateTime?       // Investigation timestamp
  investigationNotes String?      // Investigation findings
  resolution      String?         // How event was resolved

  // Notifications
  alertsSent      Json?           // Record of sent alerts
  escalated       Boolean         @default(false)
  escalatedAt     DateTime?       // Escalation timestamp

  // Business Context
  organizationId  String?         // Organization involved
  impactedResources Json?         // Resources that may be affected

  // Timestamps
  occurredAt      DateTime        @default(now())
  detectedAt      DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  resolvedAt      DateTime?       // Resolution timestamp

  @@index([eventType, severity])
  @@index([userId, occurredAt])
  @@index([status, severity])
  @@index([riskScore])
  @@index([occurredAt])
  @@index([organizationId])
  @@map("security_events")
}


