import { ValueObject } from '../../shared/domain/base/ValueObject';

/**
 * Value Object representing the status of an article in its lifecycle.
 *
 * Business Rules:
 * - Status must be one of the predefined valid statuses
 * - Status transitions must follow the defined workflow
 * - Each status represents a specific stage in the article lifecycle
 *
 * Valid statuses and their meanings:
 * - draft: Initial state, article is being created
 * - generated: Article has been generated by AI but not reviewed
 * - ready_to_publish: Article has been reviewed and approved
 * - published: Article has been published to the target site
 * - failed: Article generation or publishing failed
 *
 * Status Flow: draft -> generated -> ready_to_publish -> published
 *              Any status can transition to failed
 *              failed can transition back to draft or generated (retry)
 */
export class ArticleStatus extends ValueObject<string> {
  private static readonly VALID_STATUSES = [
    'draft',
    'generated',
    'generated_image_draft',
    'generated_with_image',
    'ready_to_publish',
    'published',
    'failed'
  ] as const;

  protected validate(value: string): void {
    if (!ArticleStatus.VALID_STATUSES.includes(value as any)) {
      throw new Error(
        `Invalid article status: ${value}. Valid statuses are: ${ArticleStatus.VALID_STATUSES.join(', ')}`
      );
    }
  }

  /**
   * Creates a draft status
   */
  static draft(): ArticleStatus {
    return new ArticleStatus('draft');
  }

  /**
   * Creates a generated status
   */
  static generated(): ArticleStatus {
    return new ArticleStatus('generated');
  }

  /**
   * Creates a generated image draft status (AI generated, waiting for image)
   */
  static generatedImageDraft(): ArticleStatus {
    return new ArticleStatus('generated_image_draft');
  }

  /**
   * Creates a generated with image status (AI + image generated)
   */
  static generatedWithImage(): ArticleStatus {
    return new ArticleStatus('generated_with_image');
  }

  /**
   * Creates a ready to publish status
   */
  static readyToPublish(): ArticleStatus {
    return new ArticleStatus('ready_to_publish');
  }

  /**
   * Creates a published status
   */
  static published(): ArticleStatus {
    return new ArticleStatus('published');
  }

  /**
   * Creates a failed status
   */
  static failed(): ArticleStatus {
    return new ArticleStatus('failed');
  }

  /**
   * Creates an ArticleStatus from a string value
   */
  static fromString(value: string): ArticleStatus {
    return new ArticleStatus(value);
  }

  /**
   * Returns all valid status values
   */
  static getValidStatuses(): readonly string[] {
    return ArticleStatus.VALID_STATUSES;
  }

  /**
   * Checks if this is a draft status
   */
  isDraft(): boolean {
    return this.value === 'draft';
  }

  /**
   * Checks if this is a generated status
   */
  isGenerated(): boolean {
    return this.value === 'generated';
  }

  /**
   * Checks if this is generated image draft status
   */
  isGeneratedImageDraft(): boolean {
    return this.value === 'generated_image_draft';
  }

  /**
   * Checks if this is generated with image status
   */
  isGeneratedWithImage(): boolean {
    return this.value === 'generated_with_image';
  }

  /**
   * Checks if this is ready to publish
   */
  isReadyToPublish(): boolean {
    return this.value === 'ready_to_publish';
  }

  /**
   * Checks if this is published
   */
  isPublished(): boolean {
    return this.value === 'published';
  }

  /**
   * Checks if this is failed
   */
  isFailed(): boolean {
    return this.value === 'failed';
  }

  /**
   * Checks if the article is in a terminal state (published or failed)
   */
  isTerminal(): boolean {
    return this.isPublished();
  }

  /**
   * Checks if the article can be edited in this status
   */
  isEditable(): boolean {
    return this.isDraft() || this.isGenerated() || this.isGeneratedImageDraft() || this.isGeneratedWithImage();
  }

  /**
   * Checks if the article can be published from this status
   */
  isPublishable(): boolean {
    return this.isReadyToPublish() || this.isGeneratedWithImage();
  }

  /**
   * Returns valid next statuses from the current status
   */
  getValidNextStatuses(): string[] {
    const transitions: Record<string, string[]> = {
      'draft': ['generated', 'failed'],
      'generated': ['generated_image_draft', 'ready_to_publish', 'failed'],
      'generated_image_draft': ['generated_with_image', 'failed'],
      'generated_with_image': ['ready_to_publish', 'failed'],
      'ready_to_publish': ['published', 'failed'],
      'published': [], // Terminal state
      'failed': ['draft', 'generated'], // Can retry
    };

    return transitions[this.value] || [];
  }

  /**
   * Checks if this status can transition to another status
   */
  canTransitionTo(nextStatus: ArticleStatus): boolean {
    return this.getValidNextStatuses().includes(nextStatus.getValue());
  }

  /**
   * Returns a human-readable display name for the status
   */
  getDisplayName(): string {
    const displayNames: Record<string, string> = {
      'draft': 'Draft',
      'generated': 'Generated',
      'generated_image_draft': 'Generated (Image Pending)',
      'generated_with_image': 'Generated with Image',
      'ready_to_publish': 'Ready to Publish',
      'published': 'Published',
      'failed': 'Failed',
    };

    return displayNames[this.value] || this.value;
  }

  /**
   * Returns a description of what this status means
   */
  getDescription(): string {
    const descriptions: Record<string, string> = {
      'draft': 'Article is being created and edited',
      'generated': 'Article has been generated by AI and awaits next step',
      'generated_image_draft': 'Article generated, waiting for featured image creation',
      'generated_with_image': 'Article generated with featured image attached',
      'ready_to_publish': 'Article has been reviewed and approved for publication',
      'published': 'Article has been successfully published',
      'failed': 'Article generation or publishing failed',
    };

    return descriptions[this.value] || 'Unknown status';
  }

  /**
   * Returns the color associated with this status for UI purposes
   */
  getColor(): StatusColor {
    const colors: Record<string, StatusColor> = {
      'draft': 'gray',
      'generated': 'blue',
      'generated_image_draft': 'blue',
      'generated_with_image': 'blue',
      'ready_to_publish': 'yellow',
      'published': 'green',
      'failed': 'red',
    };

    return colors[this.value] || 'gray';
  }

  /**
   * Returns the priority level of this status (higher number = higher priority)
   */
  getPriority(): number {
    const priorities: Record<string, number> = {
      'failed': 6,                   // Highest priority - needs attention
      'ready_to_publish': 5,         // Ready for final step
      'generated_with_image': 4,     // Complete, awaiting publish decision
      'generated_image_draft': 3,    // Waiting for image processing
      'generated': 2,                // Basic generation complete
      'draft': 1,                    // Initial state
      'published': 0,                // Lowest priority - already done
    };

    return priorities[this.value] || 0;
  }

  /**
   * Returns status metadata for UI and reporting
   */
  getMetadata(): StatusMetadata {
    return {
      value: this.value,
      displayName: this.getDisplayName(),
      description: this.getDescription(),
      color: this.getColor(),
      priority: this.getPriority(),
      isTerminal: this.isTerminal(),
      isEditable: this.isEditable(),
      isPublishable: this.isPublishable(),
      validNextStatuses: this.getValidNextStatuses(),
    };
  }
}

export type StatusColor = 'gray' | 'blue' | 'yellow' | 'green' | 'red';

export interface StatusMetadata {
  value: string;
  displayName: string;
  description: string;
  color: StatusColor;
  priority: number;
  isTerminal: boolean;
  isEditable: boolean;
  isPublishable: boolean;
  validNextStatuses: string[];
}