generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id               String          @id @default(cuid())
  title            String
  content          String
  status           String          @default("generated")
  sourceId         String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  aiModel          String?
  aiPrompts        Json?
  authorId         Int?
  authorName       String?
  categories       Json?
  commentStatus    String?
  customFields     Json?
  excerpt          String?
  featuredMediaId  Int?
  featuredMediaUrl String?
  generationConfig Json?
  isSticky         Boolean?
  lastSyncAt       DateTime?
  metaFields       Json?
  modifiedAt       DateTime?
  pingStatus       String?
  postFormat       String?
  postPassword     String?
  postTemplate     String?
  publishedAt      DateTime?
  scheduledAt      DateTime?
  shareCount       Int?
  slug             String?
  sourceTitle      String?
  sourceType       String?
  sourceUrl        String?
  tags             Json?
  viewCount        Int?
  wordpressId      Int?
  wordpressSiteId  String?
  wordpressStatus  String?
  wordpressUrl     String?
  yoastSeo         Json?
  contentProtected Boolean?
  contentRaw       String?
  contentRendered  String?
  excerptProtected Boolean?
  excerptRaw       String?
  excerptRendered  String?
  modifiedAtGmt    DateTime?
  publishedAtGmt   DateTime?
  titleRaw         String?
  titleRendered    String?
  wordpressData    Json?
  wordpressGuid    Json?
  wordpressType    String?
  articleData      Json?
  featuredMedia    WordPressMedia? @relation("FeaturedMedia", fields: [featuredMediaId, wordpressSiteId], references: [wordpressId, wordpressSiteId])
  source           Source?         @relation(fields: [sourceId], references: [id])
  wordpressSite    WordPressSite?  @relation(fields: [wordpressSiteId], references: [id])
  featuredImages   FeaturedImage[]

  @@index([wordpressId, wordpressSiteId])
  @@index([publishedAt])
  @@index([status])
  @@index([sourceType])
  @@index([createdAt])
  @@map("articles")
}

model Source {
  id              String     @id @default(cuid())
  name            String
  type            String
  status          String     @default("active")
  url             String?
  defaultCategory String?
  configuration   Json?
  metadata        Json?
  lastFetchAt     DateTime?
  lastErrorAt     DateTime?
  lastError       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  isActive        Boolean    @default(true)
  lastFetchStatus String?
  articles        Article[]
  feedItems       FeedItem[]

  @@unique([type, url])
  @@map("sources")
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String           @unique
  emailVerified       DateTime?
  image               String?
  provider            String           @default("credentials")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  clerkUserId         String?          @unique
  failedLoginAttempts Int              @default(0)
  isActive            Boolean          @default(true)
  lastLoginAt         DateTime?
  organizationId      String?
  role                UserRole         @default(CONTENT_VIEWER)
  accounts            Account[]
  sessions            Session[]
  userPermissions     UserPermission[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FeedItem {
  id          String   @id @default(cuid())
  sourceId    String
  guid        String?
  title       String
  content     String
  url         String?
  publishedAt DateTime
  fetchedAt   DateTime @default(now())
  processed   Boolean  @default(false)
  articleId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      String   @default("pending")
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, publishedAt])
  @@index([status])
  @@map("feed_items")
}

model GenerationSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  titlePrompt             String
  contentPrompt           String
  defaultModel            String   @default("sonar-pro")
  defaultTemperature      Float    @default(0.7)
  defaultMaxTokens        Int      @default(20000)
  defaultLanguage         String   @default("it")
  defaultTone             String   @default("professionale")
  defaultStyle            String   @default("giornalistico")
  defaultTargetAudience   String   @default("generale")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  imagePrompt             String   @default("in stile cartoon. Individua un dettaglio rappresentativo dell'idea base dell'articolo. Non usare scritte n√© simboli.")
  imageStyle              String   @default("natural")
  imageModel              String   @default("dall-e-3")
  imageSize               String   @default("1792x1024")
  allowPromptEditing      Boolean  @default(true)
  enablePromptEngineering Boolean  @default(false)
  imageGenerationMode     String   @default("manual")
  promptEngineeringModel  String   @default("gpt-4")
  promptTemplate          String?

  @@map("generation_settings")
}

model WordPressSite {
  id                   String           @id @default(cuid())
  userId               String           @unique
  name                 String
  url                  String
  username             String
  password             String
  defaultCategory      String?
  defaultStatus        String           @default("draft")
  defaultAuthor        String?
  enableAutoPublish    Boolean          @default(false)
  enableFeaturedImage  Boolean          @default(true)
  enableTags           Boolean          @default(true)
  enableCategories     Boolean          @default(true)
  customFields         Json?
  isActive             Boolean          @default(true)
  lastPublishAt        DateTime?
  lastError            String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  enableAutoGeneration Boolean          @default(false)
  articles             Article[]
  media                WordPressMedia[]

  @@map("wordpress_sites")
}

model WordPressMedia {
  id                String        @id @default(cuid())
  wordpressId       Int
  wordpressSiteId   String
  status            String
  slug              String?
  author            Int?
  uploadedAt        DateTime?
  uploadedAtGmt     DateTime?
  modifiedAt        DateTime?
  modifiedAtGmt     DateTime?
  title             String?
  altText           String?
  caption           String?
  description       String?
  mediaType         String?
  mimeType          String?
  sourceUrl         String
  link              String?
  fileSize          Int?
  fileName          String?
  width             Int?
  height            Int?
  guid              Json?
  mediaDetails      Json?
  postId            Int?
  customFields      Json?
  metaFields        Json?
  wordpressData     Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastSyncAt        DateTime?
  articlesAsFeature Article[]     @relation("FeaturedMedia")
  wordpressSite     WordPressSite @relation(fields: [wordpressSiteId], references: [id])

  @@unique([wordpressId, wordpressSiteId])
  @@index([mediaType])
  @@index([uploadedAt])
  @@map("wordpress_media")
}

model Publication {
  id          String    @id @default(cuid())
  articleId   String
  externalId  String
  externalUrl String
  status      String
  platform    String
  target      Json
  content     Json
  metadata    Json
  publishedAt DateTime?
  retryCount  Int       @default(0)
  lastError   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("publications")
}

model FeaturedImage {
  id               String   @id @default(cuid())
  articleId        String
  aiPrompt         String
  filename         String
  altText          String
  url              String?
  status           String
  searchQuery      String?
  errorMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  wordpressMediaId Int?
  wordpressUrl     String?
  article          Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([status])
  @@index([createdAt])
  @@index([wordpressMediaId])
  @@map("featured_images")
}

model ImagePrompt {
  id               String   @id @default(cuid())
  articleId        String
  articleTitle     String
  articleExcerpt   String
  generatedPrompt  String
  originalTemplate String
  aiModel          String
  status           String
  metadata         String?
  errorMessage     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([articleId])
  @@index([status])
  @@index([createdAt])
  @@map("image_prompts")
}

model HealthCheck {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  status       String
  responseTime Int
  details      Json
  version      String?
  environment  String?
  alertSent    Boolean  @default(false)
  alertType    String?
  createdAt    DateTime @default(now())

  @@index([timestamp])
  @@index([status])
  @@index([alertSent])
  @@map("health_checks")
}

model SystemAlert {
  id                String    @id @default(cuid())
  type              String
  service           String
  severity          String
  status            String
  title             String
  message           String
  details           Json?
  triggeredAt       DateTime  @default(now())
  resolvedAt        DateTime?
  acknowledgedAt    DateTime?
  notificationsSent Json?
  occurrenceCount   Int       @default(1)
  lastOccurrence    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([type, service])
  @@index([severity])
  @@index([status])
  @@index([triggeredAt])
  @@map("system_alerts")
}

model HealthReport {
  id                  String    @id @default(cuid())
  timestamp           DateTime  @default(now())
  reportType          String
  periodStart         DateTime
  periodEnd           DateTime
  overallStatus       String
  totalChecks         Int
  uptimePercentage    Float
  totalAlerts         Int
  criticalAlerts      Int
  averageResponseTime Int
  reportData          Json
  htmlReport          String
  emailSent           Boolean   @default(false)
  emailSentAt         DateTime?
  emailRecipients     Json?
  createdAt           DateTime  @default(now())

  @@index([timestamp])
  @@index([reportType])
  @@index([overallStatus])
  @@index([periodStart, periodEnd])
  @@map("health_reports")
}

model UserPermission {
  id         String   @id @default(cuid())
  userId     String
  permission String
  resource   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission, resource])
  @@index([userId])
  @@index([permission])
  @@map("user_permissions")
}

enum UserRole {
  SUPER_ADMIN
  ORGANIZATION_ADMIN
  CONTENT_MANAGER
  CONTENT_EDITOR
  CONTENT_VIEWER
  API_USER
}
