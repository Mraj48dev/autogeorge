generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  content   String
  status    String   @default("generated")
  sourceId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  source    Source?  @relation(fields: [sourceId], references: [id])

  @@map("articles")
}

model Source {
  id              String     @id @default(cuid())
  name            String
  type            String
  status          String     @default("active")
  url             String?
  defaultCategory String?
  configuration   Json?
  metadata        Json?
  lastFetchAt     DateTime?
  lastErrorAt     DateTime?
  lastError       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  articles        Article[]
  feedItems       FeedItem[]

  @@unique([type, url])
  @@map("sources")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  provider      String    @default("credentials")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FeedItem {
  id          String   @id @default(cuid())
  sourceId    String
  guid        String?
  title       String
  content     String
  url         String?
  publishedAt DateTime
  fetchedAt   DateTime @default(now())
  processed   Boolean  @default(false)
  articleId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@unique([sourceId, guid])
  @@unique([sourceId, url])
  @@index([sourceId, publishedAt])
  @@index([processed])
  @@map("feed_items")
}

model GenerationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  titlePrompt           String
  contentPrompt         String
  seoPrompt             String
  defaultModel          String   @default("gpt-4")
  defaultTemperature    Float    @default(0.7)
  defaultMaxTokens      Int      @default(2000)
  defaultLanguage       String   @default("it")
  defaultTone           String   @default("professionale")
  defaultStyle          String   @default("giornalistico")
  defaultTargetAudience String   @default("generale")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("generation_settings")
}

model WordPressSite {
  id               String   @id @default(cuid())
  userId           String   @unique
  name             String
  url              String
  username         String
  password         String
  defaultCategory  String?
  defaultStatus    String   @default("draft")
  defaultAuthor    String?
  enableAutoPublish Boolean @default(false)
  enableFeaturedImage Boolean @default(true)
  enableTags       Boolean @default(true)
  enableCategories Boolean @default(true)
  customFields     Json?
  isActive         Boolean  @default(true)
  lastPublishAt    DateTime?
  lastError        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("wordpress_sites")
}
