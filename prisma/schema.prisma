generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        String   @id @default(cuid())

  // Campi base dell'articolo (oggetti WordPress)
  title         String
  titleRaw      String?     // title.raw da WordPress
  titleRendered String?     // title.rendered da WordPress
  content       String
  contentRaw    String?     // content.raw da WordPress
  contentRendered String?   // content.rendered da WordPress
  contentProtected Boolean? // content.protected da WordPress
  excerpt       String?
  excerptRaw    String?     // excerpt.raw da WordPress
  excerptRendered String?   // excerpt.rendered da WordPress
  excerptProtected Boolean? // excerpt.protected da WordPress
  status        String      @default("generated")
  slug          String?

  // Nuova struttura JSON articolo
  articleData   Json?       // Struttura JSON completa dell'articolo (metadati, seo, contenuto, immagine, link)

  // Metadati WordPress
  wordpressId       Int?        // ID del post su WordPress
  wordpressSiteId   String?     // Riferimento al sito WordPress
  wordpressUrl      String?     // URL del post pubblicato (link)
  wordpressStatus   String?     // draft, publish, private, future
  wordpressType     String?     // Tipo di post WordPress
  wordpressGuid     Json?       // Globally unique identifier object

  // Tassonomie
  categories        Json?       // Array di ID categorie WordPress
  tags              Json?       // Array di ID tag WordPress

  // Media e allegati
  featuredMediaId   Int?        // ID immagine in evidenza WordPress
  featuredMediaUrl  String?     // URL immagine in evidenza
  featuredMedia     WordPressMedia? @relation("FeaturedMedia", fields: [featuredMediaId, wordpressSiteId], references: [wordpressId, wordpressSiteId])

  // Metadati di pubblicazione (WordPress native)
  publishedAt       DateTime?   // Data di pubblicazione (date)
  publishedAtGmt    DateTime?   // Data di pubblicazione GMT (date_gmt)
  modifiedAt        DateTime?   // Ultima modifica su WordPress (modified)
  modifiedAtGmt     DateTime?   // Ultima modifica GMT (modified_gmt)
  scheduledAt       DateTime?   // Data programmata (per status=future)

  // Configurazione post
  postFormat        String?     // standard, aside, gallery, etc.
  postTemplate      String?     // Template personalizzato
  postPassword      String?     // Password per contenuti protetti

  // Controlli di interazione
  commentStatus     String?     // open, closed
  pingStatus        String?     // open, closed
  isSticky          Boolean?    // Post in evidenza

  // Metadati autore
  authorId          Int?        // ID autore WordPress
  authorName        String?     // Nome autore

  // Custom fields e meta
  customFields      Json?       // Custom fields del post
  yoastSeo          Json?       // Metadati Yoast SEO
  metaFields        Json?       // Altri meta fields
  wordpressData     Json?       // JSON completo della risposta WordPress

  // Statistiche e tracciamento
  viewCount         Int?        // Numero di visualizzazioni
  shareCount        Int?        // Numero di condivisioni

  // Fonte e generazione
  sourceId          String?     // Fonte da cui è stato generato
  sourceType        String?     // manual, rss, telegram, etc.
  sourceUrl         String?     // URL fonte originale
  sourceTitle       String?     // Titolo fonte

  // AI e generazione
  aiModel           String?     // Modello AI usato per generazione
  aiPrompts         Json?       // Prompt utilizzati
  generationConfig  Json?       // Configurazione generazione

  // Metadati sistema
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastSyncAt        DateTime?   // Ultima sincronizzazione con WordPress

  // Relazioni
  source            Source?     @relation(fields: [sourceId], references: [id])
  wordpressSite     WordPressSite? @relation(fields: [wordpressSiteId], references: [id])
  featuredImages    FeaturedImage[] // Relazione con immagini generate

  @@index([wordpressId, wordpressSiteId])
  @@index([publishedAt])
  @@index([status])
  @@index([sourceType])
  @@index([createdAt])
  @@map("articles")
}

model Source {
  id              String     @id @default(cuid())
  name            String
  type            String
  status          String     @default("active")
  url             String?
  defaultCategory String?
  configuration   Json?
  metadata        Json?
  lastFetchAt     DateTime?
  lastErrorAt     DateTime?
  lastError       String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  articles        Article[]
  feedItems       FeedItem[]

  @@unique([type, url])
  @@map("sources")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  provider      String    @default("credentials")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model FeedItem {
  id          String   @id @default(cuid())
  sourceId    String
  guid        String?
  title       String
  content     String
  url         String?
  publishedAt DateTime
  fetchedAt   DateTime @default(now())
  status      String   @default("pending") // "pending" | "draft" | "processed"
  processed   Boolean  @default(false) // TEMPORARY: Keep for migration safety
  articleId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  source      Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@index([sourceId, publishedAt])
  @@index([status])
  @@map("feed_items")
}

model GenerationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  titlePrompt           String
  contentPrompt         String
  imagePrompt           String   @default("in stile cartoon. Individua un dettaglio rappresentativo dell'idea base dell'articolo. Non usare scritte né simboli.")
  imageStyle            String   @default("natural")
  defaultModel          String   @default("sonar-pro")
  defaultTemperature    Float    @default(0.7)
  defaultMaxTokens      Int      @default(20000)
  defaultLanguage       String   @default("it")
  defaultTone           String   @default("professionale")
  defaultStyle          String   @default("giornalistico")
  defaultTargetAudience String   @default("generale")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("generation_settings")
}

model WordPressSite {
  id               String   @id @default(cuid())
  userId           String   @unique
  name             String
  url              String
  username         String
  password         String
  defaultCategory  String?
  defaultStatus    String   @default("draft")
  defaultAuthor    String?
  enableAutoGeneration Boolean @default(false)
  enableAutoPublish Boolean @default(false)
  enableFeaturedImage Boolean @default(true)
  enableTags       Boolean @default(true)
  enableCategories Boolean @default(true)
  customFields     Json?
  isActive         Boolean  @default(true)
  lastPublishAt    DateTime?
  lastError        String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relazioni
  articles         Article[]
  media            WordPressMedia[]

  @@map("wordpress_sites")
}

model WordPressMedia {
  id               String   @id @default(cuid())

  // Metadati WordPress Media
  wordpressId      Int      // ID del media su WordPress
  wordpressSiteId  String   // Riferimento al sito WordPress
  status           String   // publish, draft, etc.
  slug             String?  // Identificatore univoco
  author           Int?     // ID autore che ha caricato

  // Date WordPress native
  uploadedAt       DateTime? // data caricamento
  uploadedAtGmt    DateTime? // data caricamento GMT
  modifiedAt       DateTime? // ultima modifica
  modifiedAtGmt    DateTime? // ultima modifica GMT

  // Metadati base del file
  title            String?   // Titolo del media
  altText          String?   // Testo alternativo (importante per SEO)
  caption          String?   // Didascalia
  description      String?   // Descrizione completa

  // Informazioni tecniche del file
  mediaType        String?   // image, file, video, audio
  mimeType         String?   // image/jpeg, image/png, etc.
  sourceUrl        String    // URL originale del file
  link             String?   // URL pagina media WordPress

  // Dettagli tecnici avanzati
  fileSize         Int?      // Dimensione in bytes
  fileName         String?   // Nome file originale
  width            Int?      // Larghezza immagine
  height           Int?      // Altezza immagine

  // Metadati WordPress avanzati
  guid             Json?     // Globally unique identifier
  mediaDetails     Json?     // Dettagli specifici media (sizes, exif, etc.)
  postId           Int?      // ID post associato (se allegato)

  // Metadati aggiuntivi
  customFields     Json?     // Custom fields del media
  metaFields       Json?     // Meta fields WordPress
  wordpressData    Json?     // JSON completo risposta WordPress

  // Metadati sistema
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastSyncAt       DateTime? // Ultima sincronizzazione

  // Relazioni
  wordpressSite    WordPressSite @relation(fields: [wordpressSiteId], references: [id])
  articlesAsFeature Article[] @relation("FeaturedMedia")

  @@unique([wordpressId, wordpressSiteId])
  @@index([mediaType])
  @@index([uploadedAt])
  @@map("wordpress_media")
}

model Publication {
  id            String   @id @default(cuid())
  articleId     String
  externalId    String
  externalUrl   String
  status        String
  platform      String
  target        Json
  content       Json
  metadata      Json
  publishedAt   DateTime?
  retryCount    Int      @default(0)
  lastError     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("publications")
}

model FeaturedImage {
  id           String   @id @default(cuid())
  articleId    String   // Riferimento all'articolo
  aiPrompt     String   // Prompt AI utilizzato per la generazione
  filename     String   // Nome del file dell'immagine
  altText      String   // Testo alternativo per l'immagine
  url          String?  // URL dell'immagine generata (null se generazione fallita)
  status       String   // pending, searching, found, generated, uploaded, failed
  searchQuery  String?  // Query di ricerca utilizzata (opzionale)
  errorMessage String?  // Messaggio di errore in caso di fallimento

  // WordPress upload fields
  wordpressMediaId Int?    // ID dell'immagine nella media library di WordPress
  wordpressUrl     String? // URL dell'immagine su WordPress

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relazione con Article
  article      Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([status])
  @@index([createdAt])
  @@index([wordpressMediaId])
  @@map("featured_images")
}


